BEGIN TRANSACTION;
CREATE TABLE T_Data (event_id INTEGER NOT NULL, title_id INTEGER, short_description_id INTEGER, extended_description_id INTEGER, iso_639_language_code TEXT NOT NULL, changed DATETIME NOT NULL DEFAULT current_timestamp);
CREATE TABLE T_Event (id INTEGER PRIMARY KEY, service_id INTEGER NOT NULL, begin_time INTEGER NOT NULL, duration INTEGER NOT NULL, source_id INTEGER NOT NULL, dvb_event_id INTEGER, changed DATETIME NOT NULL DEFAULT current_timestamp);
CREATE TABLE T_Extended_Description (id INTEGER PRIMARY KEY, hash INTEGER NOT NULL UNIQUE, extended_description TEXT NOT NULL, changed DATETIME NOT NULL DEFAULT current_timestamp);
CREATE TABLE T_Service (id INTEGER PRIMARY KEY, sid INTEGER NOT NULL, tsid INTEGER, onid INTEGER, dvbnamespace INTEGER, changed DATETIME NOT NULL DEFAULT current_timestamp);
CREATE TABLE T_Short_Description (id INTEGER PRIMARY KEY, hash INTEGER NOT NULL UNIQUE, short_description TEXT NOT NULL, changed DATETIME NOT NULL DEFAULT current_timestamp);
CREATE TABLE T_Source (id INTEGER PRIMARY KEY, source_name TEXT NOT NULL, priority INTEGER NOT NULL, changed DATETIME NOT NULL DEFAULT current_timestamp);
INSERT INTO "T_Source" VALUES(0,'Sky Private EPG',0,'2021-12-28 12:52:11');
INSERT INTO "T_Source" VALUES(1,'DVB Now/Next Table',0,'2021-12-28 12:52:11');
INSERT INTO "T_Source" VALUES(2,'DVB Schedule (same Transponder)',0,'2021-12-28 12:52:11');
INSERT INTO "T_Source" VALUES(3,'DVB Schedule Other (other Transponder)',0,'2021-12-28 12:52:11');
INSERT INTO "T_Source" VALUES(4,'Viasat',0,'2021-12-28 12:52:11');
CREATE TABLE T_Title (id INTEGER PRIMARY KEY, hash INTEGER NOT NULL UNIQUE, title TEXT NOT NULL, changed DATETIME NOT NULL DEFAULT current_timestamp);
CREATE INDEX data_title ON T_Data (title_id);
CREATE INDEX data_shortdescr ON T_Data (short_description_id);
CREATE INDEX data_extdescr ON T_Data (extended_description_id);
CREATE INDEX service_sid ON T_Service (sid);
CREATE INDEX event_service_id_begin_time ON T_Event (service_id, begin_time);
CREATE INDEX event_dvb_id ON T_Event (dvb_event_id);
CREATE INDEX data_event_id ON T_Data (event_id);
CREATE TRIGGER tr_on_delete_cascade_t_event 			AFTER DELETE ON T_Event 			FOR EACH ROW BEGIN 			  DELETE FROM T_Data WHERE event_id = OLD.id; 			END;
CREATE TRIGGER tr_on_delete_cascade_t_service_t_event 			AFTER DELETE ON T_Service 			FOR EACH ROW BEGIN 			  DELETE FROM T_Event WHERE service_id = OLD.id; 			END;
CREATE TRIGGER tr_on_delete_cascade_t_data_t_title 			AFTER DELETE ON T_Data 			FOR EACH ROW 			WHEN ((SELECT event_id FROM T_Data WHERE title_id = OLD.title_id LIMIT 1) ISNULL) BEGIN 			  DELETE FROM T_Title WHERE id = OLD.title_id; 			END;
CREATE TRIGGER tr_on_delete_cascade_t_data_t_short_description 			AFTER DELETE ON T_Data 			FOR EACH ROW 			WHEN ((SELECT event_id FROM T_Data WHERE short_description_id = OLD.short_description_id LIMIT 1) ISNULL) BEGIN 			  DELETE FROM T_Short_Description WHERE id = OLD.short_description_id; 			END;
CREATE TRIGGER tr_on_delete_cascade_t_data_t_extended_description 			AFTER DELETE ON T_Data 			FOR EACH ROW 			WHEN ((SELECT event_id FROM T_Data WHERE extended_description_id = OLD.extended_description_id LIMIT 1) ISNULL) BEGIN 			  DELETE FROM T_Extended_Description WHERE id = OLD.extended_description_id; 			END;
CREATE TRIGGER tr_on_update_cascade_t_data_t_title 			AFTER UPDATE ON T_Data 			FOR EACH ROW 			WHEN (OLD.title_id <> NEW.title_id AND ((SELECT event_id FROM T_Data WHERE title_id = OLD.title_id LIMIT 1) ISNULL)) BEGIN 			  DELETE FROM T_Title WHERE id = OLD.title_id; 			END;
CREATE TRIGGER tr_on_update_cascade_t_data_t_short_description 			AFTER UPDATE ON T_Data 			FOR EACH ROW 			WHEN (OLD.short_description_id <> NEW.short_description_id AND ((SELECT event_id FROM T_Data WHERE short_description_id = OLD.short_description_id LIMIT 1) ISNULL)) BEGIN 			  DELETE FROM T_Short_Description WHERE id = OLD.short_description_id; 			END;
CREATE TRIGGER tr_on_update_cascade_t_data_t_extended_description 			AFTER UPDATE ON T_Data 			FOR EACH ROW 			WHEN (OLD.extended_description_id <> NEW.extended_description_id AND ((SELECT event_id FROM T_Data WHERE extended_description_id = OLD.extended_description_id LIMIT 1) ISNULL)) BEGIN 			  DELETE FROM T_Extended_Description WHERE id = OLD.extended_description_id; 			END;
COMMIT;
